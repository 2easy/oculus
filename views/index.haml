:javascript
  $(document).ready(function () {
       var end_date = new Date().getTime();
       var start_date = end_date - (60*60*1000);
       var data = [];
       var data_values = [];
       for (var d = start_date; d < end_date; d += 60*60) {
         var millis = d + 60*60;
         data.push( [ new Date(new Date(millis).strftime("%Y/%m/%d %H:%M:%S")), 0 ]);
       }

       var isDrawing = false;
       var lastDrawRow = null, lastDrawValue = null;
       var tool = 'pencil';
       var valueRange = [0, 100];

       function setPoint(event, g, context) {
         var canvasx = Dygraph.pageX(event) - Dygraph.findPosX(g.graphDiv);
         var canvasy = Dygraph.pageY(event) - Dygraph.findPosY(g.graphDiv);
         var xy = g.toDataCoords(canvasx, canvasy);
         var x = xy[0], value = xy[1];
         var rows = g.numRows();
         var closest_row = -1;
         var smallest_diff = -1;
         // TODO(danvk): binary search
         for (var row = 0; row < rows; row++) {
           var date = g.getValue(row, 0);  // millis
           var diff = Math.abs(date - x);
           if (smallest_diff < 0 || diff < smallest_diff) {
             smallest_diff = diff;
             closest_row = row;
           }
         }

         if (closest_row != -1) {
           if (lastDrawRow === null) {
             lastDrawRow = closest_row;
             lastDrawValue = value;
           }
           var coeff = (value - lastDrawValue) / (closest_row - lastDrawRow);
           if (closest_row == lastDrawRow) coeff = 0.0;
           var minRow = Math.min(lastDrawRow, closest_row);
           var maxRow = Math.max(lastDrawRow, closest_row);
           for (var row = minRow; row <= maxRow; row++) {
             if (tool == 'pencil') {
               var val = lastDrawValue + coeff * (row - lastDrawRow);
               val = Math.max(valueRange[0], Math.min(val, valueRange[1]));
               data[row][1] = val;
               if (val == null || isNaN(val)) console.log(val);
             } else if (tool == 'eraser') {
               data[row][1] = null;
             }
           }
           lastDrawRow = closest_row;
           lastDrawValue = value;
           g.updateOptions({ file: data });
           g.setSelection(closest_row);  // prevents the dot from being finnicky.
         }
       }

       function finishDraw() {
         isDrawing = false;
         lastDrawRow = null;
         lastDrawValue = null;
       }

       var dg_div = document.getElementById("draw_div");
       dg_div.style.cursor = 'url(assets/img/cursor-pencil.png) 2 30, auto';

       g = new Dygraph(document.getElementById("draw_div"), data,
           {
             valueRange: valueRange,
             labels: [ 'Date', 'Value' ],
             interactionModel: {
               mousedown: function (event, g, context) {
                 if (tool == 'zoom') {
                   Dygraph.defaultInteractionModel.mousedown(event, g, context);
                 } else {
                   // prevents mouse drags from selecting page text.
                   if (event.preventDefault) {
                     event.preventDefault();  // Firefox, Chrome, etc.
                   } else {
                     event.returnValue = false;  // IE
                     event.cancelBubble = true;
                   }
                   isDrawing = true;
                   setPoint(event, g, context);
                 }
               },
               mousemove: function (event, g, context) {
                 if (tool == 'zoom') {
                   Dygraph.defaultInteractionModel.mousemove(event, g, context);
                 } else {
                   if (!isDrawing) return;
                   setPoint(event, g, context);
                 }
               },
               mouseup: function(event, g, context) {
                 if (tool == 'zoom') {
                   Dygraph.defaultInteractionModel.mouseup(event, g, context);
                 } else {
                   finishDraw();
                 }
                 data_values = []
                 for (var i = 0; i < data.length; i+=16) {
                     data_values.push(Math.round(data[i][1]));
                 }
                 $('input[name=draw_values]').val(data_values.toString());
               },
               mouseout: function(event, g, context) {
                 if (tool == 'zoom') {
                   Dygraph.defaultInteractionModel.mouseout(event, g, context);
                 }
                  data_values = []
                  for (var i = 0; i < data.length; i+=16) {
                      data_values.push(Math.round(data[i][1]));
                  }
                  $('input[name=draw_values]').val(data_values.toString());
               },
               dblclick: function(event, g, context) {
                 Dygraph.defaultInteractionModel.dblclick(event, g, context);
               },
               mousewheel: function(event, g, context) {
                 var normal = event.detail ? event.detail * -1 : event.wheelDelta / 40;
                 var percentage = normal / 50;
                 var axis = g.xAxisRange();
                 var xOffset = g.toDomCoords(axis[0], null)[0];
                 var x = event.offsetX - xOffset;
                 var w = g.toDomCoords(axis[1], null)[0] - xOffset;
                 var xPct = w == 0 ? 0 : (x / w);

                 var delta = axis[1] - axis[0];
                 var increment = delta * percentage;
                 var foo = [increment * xPct, increment * (1 - xPct)];
                 var dateWindow = [ axis[0] + foo[0], axis[1] - foo[1] ];

                 g.updateOptions({
                   dateWindow: dateWindow

                 });
                 Dygraph.cancelEvent(event);
               }
             },
             strokeWidth: 1.5,
             gridLineColor: 'rgb(196, 196, 196)',
             drawYGrid: false,
             drawYAxis: false
           });
           window.onmouseup = finishDraw;
       }
  );
.container

  %h1
    Welcome to Oculus!
  %form{:class => "search", :name => "search", :action => "/search", :method => "get"}
    %h3
      Search for a Metric:

    %select{:name => "search_type", :class => "btn btn-mini"}
      - @search_types.each do |s|
        - if !@search_type.nil? and @search_type == s.downcase
          %option{:selected => true}
            =s
        - elsif @search_type.nil? and s.downcase == "fastdtw"
          %option{:selected => true}
            =s
        - else
          %option
            =s
    %span{:class => "caret"}
    %input{:type => "text", :class => "search-query input-header-search", :name => "query", :value => "#{@query || nil}", :placeholder => "#{ @query || 'Search'}"}
    %input{:type => "hidden", :name => "page", :placeholder => "1"}
    %input{:type => "hidden", :name => "filters", :value => "#{@filters.nil? ? "" : @filters.join(".")}"}
    %input{:type => "hidden", :name => "draw_values", :value => ""}
    %h3
      Or why not draw your query?
    %div{:id => "draw_div", :style => "width: 600px; height: 300px;border: 1px solid black;"}
    %p
    %button{:type => "button", :class => "btn", "data-toggle" => "modal", "data-target" => "#searchSettingsModal"}
      Search Settings
    = haml :search_settings.to_sym
    %button{:type => "submit", :class => "btn"}
      Search